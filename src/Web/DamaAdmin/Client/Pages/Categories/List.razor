@page "/categorias/"
@page "/categorias/{message}"
@page "/categorias/pag/{PageIndex:int?}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<h2>Categorias</h2>

<p>
    <a href="/categorias/novo">Nova Categoria</a>
</p>
@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert alert-success" role="alert">
        @Message
    </div>
}
@if (categories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-pagination">
        <thead>
            <tr>
                <th>
                    Nome
                </th>
                <th>
                    Ordem
                </th>
                <th>
                    Categoria Pai
                </th>
                <th>
                    Meta Description
                </th>
                <th>
                    Titulo
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in categories)
            {
                <tr>
                    <td>
                        @item.Name
                    </td>
                    <td>
                        @item.Order
                    </td>
                    <td>
                        @item.Parent?.Name
                    </td>
                    <td>
                        @item.MetaDescription
                    </td>
                    <td>
                        @item.Title
                    </td>
                    <td>
                        <a href="/categorias/@item.Id" class="btn btn-warning btn-sm" role="button" title="Editar">
                            <span class="oi oi-pencil" title="Editar" aria-hidden="true"></span>
                        </a>
                        <button class="btn btn-info btn-sm" @onclick="() => Modal.Open(item.Name, item)">
                            <span class="oi oi-eye" title="Ver" aria-hidden="true"></span>
                        </button>
                        <button class="btn btn-danger btn-sm" @onclick="() => OnRemoveItem(item)">
                            <span class="oi oi-trash" title="Remover" aria-hidden="true"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td colspan="6">
                    <Pagination Info="Params"></Pagination>
                </td>
            </tr>
        </tfoot>
    </table>
    <Modal @ref="Modal"></Modal>
}

@code {
    private CategoryDTO[] categories;
    private Modal Modal { get; set; }
    private Pagination Pagination { get; set; }
    private Pagination.PaginationInfo Params;

    [Parameter]
    public string Message { get; set; }
    [Parameter]
    public int? PageIndex { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<PaginatedList<CategoryDTO>>($"Categories?pageIndex={PageIndex}"); //, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }
            categories = result.Items.ToArray();
            Params = new(result.PageIndex, result.TotalPages, result.HasPreviousPage, result.HasNextPage, "/categorias/pag");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task OnRemoveItem(CategoryDTO item)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Tens a certeza que queres remover a categoria {item.Name}?"))
            return;

        var response = await Http.DeleteAsync($"categories?id={item.Id}");

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            Message = $"Categoria {item.Name} foi removida!";
            categories = await Http.GetFromJsonAsync<CategoryDTO[]>("Categories");
        }
        else
        {
            var content = await response.Content.ReadAsStringAsync();
            Message = $"Erro ao remover Categoria {item.Name}: ({response.StatusCode}) {content}";
        }
    }
}